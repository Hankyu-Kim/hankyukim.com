---
import DesignPatternsImg from "@/assets/SOLID.jpeg";
import PageLayout from "@/layouts/Base.astro";
import { Image } from "astro:assets";

const meta = {
	description: "I'm a starter theme for Astro.build",
	title: "About",
};
---

<PageLayout meta={meta}>
	<div class="space-y-6">
		<h1 class="title">SOLID Principle and Design Patterns</h1>
		<p>
			SOLID abbreviation represents :
		</p>
		<p>
			SRP(Single Responsibility Principle) - A class should have only one responsibility.
		</p>
		<p>
			OCP(Open Closed Principle) - Software entities should be open for extension, but closed for modification
		</p>
		<p>
			LSP(Liskov Substitution Principle) - Functions that use pointers or references to base classes must be able to use objects of derived classes.
		</p>
		<p>
			ISP(Interface Segregation Principle) - Interfaces can be segregated for clients not depending on interfaces that they do not use.
		</p>
		<p>
			DIP(Dependency Inversion Principle) - Depend upon abstractions, not concretes.
		</p>
		<div class="flex justify-center">
			<Image
				alt="A cartoon cactus looking at the 'Astro.build' logo"
				fetchpriority="high"
				loading="eager"
				src={DesignPatternsImg}
			/>
		</div>
		
		<br>
		<br>
		<br>
		<br>
		<br>

		<h1 class="title">Essential attributes of good software</h1>
		<p>
			Maintainability :
		</p>
		<p>
			Software should be written in such a way so that it can evolve to meet the changing needs of customers. This is a critical attribute because software change is an inevitable requirement of a changing business environment.
		</p>
		<p>
			Dependability and security :
		</p>
		<p>
			Software dependability includes a range of characteristics including reliability, security and safety. Dependable software should not cause physical or economic damage in the event of system failure. Malicious users should not be able to access of damage the system.
		</p>
		<p>
			Efficiency :
		</p>
		<p>
			Software should not make wasteful use of system resources such as memory and processor cycles. Efficiency therefore includes responsiveness, processing time, memory utilization, etc.
		</p>
		<p>
			Acceptability :
		</p>
		<p>
			Software must be acceptable to the type of users for which it is designed. This means that it must be understandable, usable and compatible with other systems that they use.
		</p>
</PageLayout>
